#
#   pcre-windows-static.nmake -- Makefile to build PCRE Library for windows
#

NAME                  = pcre
VERSION               = 1.0.3

OS                    = windows
PA                    = $(PROCESSOR_ARCHITECTURE)
!IF "$(PROFILE)" == ""
PROFILE               = static
!ENDIF


!IF "$(PA)" == "AMD64"
ARCH                  = x64
ENTRY                 = _DllMainCRTStartup
!ELSE
ARCH                  = x86
ENTRY                 = _DllMainCRTStartup@12
!ENDIF

!IF "$(CONFIG)" == ""
CONFIG                = $(OS)-$(ARCH)-$(PROFILE)
!ENDIF

!IF "$(BUILD)" == ""
BUILD                 = build\$(CONFIG)
!ENDIF

LBIN                  = $(BUILD)\bin

!IF "$(ME_COM_VXWORKS)" == ""
ME_COM_VXWORKS        = 0
!ENDIF


ME_COM_COMPILER_PATH  = cl
ME_COM_LIB_PATH       = lib.exe
ME_COM_LINK_PATH      = link.exe
ME_COM_RC_PATH        = rc.exe

CC                    = cl
LD                    = link
RC                    = rc
CFLAGS                = -nologo -GR- -W3 -Zi -Od -MDd
DFLAGS                = -D_REENTRANT -D_MT -DME_COM_VXWORKS=$(ME_COM_VXWORKS) 
IFLAGS                = -Ibuild\$(CONFIG)\inc
LDFLAGS               = -nologo -nodefaultlib -incremental:no -debug -machine:$(ARCH)
LIBPATHS              = "-libpath:build\$(CONFIG)\bin"
LIBS                  = ws2_32.lib advapi32.lib user32.lib kernel32.lib oldnames.lib msvcrt.lib shell32.lib

ME_ROOT_PREFIX        = C:
ME_BASE_PREFIX        = $(ME_ROOT_PREFIX)\Program Files
ME_APP_PREFIX         = $(ME_BASE_PREFIX)\PCRE Library
ME_VAPP_PREFIX        = $(ME_APP_PREFIX)
ME_DATA_PREFIX        = $(ME_VAPP_PREFIX)
ME_STATE_PREFIX       = $(ME_VAPP_PREFIX)
ME_BIN_PREFIX         = $(ME_VAPP_PREFIX)\bin
ME_INC_PREFIX         = $(ME_VAPP_PREFIX)\inc
ME_LIB_PREFIX         = $(ME_VAPP_PREFIX)\lib
ME_MAN_PREFIX         = $(ME_VAPP_PREFIX)\man
ME_ETC_PREFIX         = $(ME_VAPP_PREFIX)
ME_WEB_PREFIX         = $(ME_VAPP_PREFIX)\web
ME_LOG_PREFIX         = $(ME_VAPP_PREFIX)\log
ME_SPOOL_PREFIX       = $(ME_VAPP_PREFIX)\tmp
ME_CACHE_PREFIX       = $(ME_VAPP_PREFIX)\cache
ME_SRC_PREFIX         = $(ME_VAPP_PREFIX)\src


TARGETS               = $(TARGETS) build\$(CONFIG)\bin\libpcre.lib

!IFNDEF SHOW
.SILENT:
!ENDIF

all build compile: prep $(TARGETS)

.PHONY: prep

prep:
!IF "$(VSINSTALLDIR)" == ""
	echo "Visual Studio vars not set. Run vcvars.bat."
	exit 255
!ENDIF
!IF "$(ME_APP_PREFIX)" == ""
	echo "ME_APP_PREFIX not set."
	exit 255
!ENDIF
	@if not exist $(BUILD)\bin md $(BUILD)\bin
	@if not exist $(BUILD)\inc md $(BUILD)\inc
	@if not exist $(BUILD)\obj md $(BUILD)\obj
	@if not exist $(BUILD)\inc\me.h copy projects\pcre-windows-static-me.h $(BUILD)\inc\me.h

clean:
	if exist "build\$(CONFIG)\obj\pcre_chartables.obj" del /Q "build\$(CONFIG)\obj\pcre_chartables.obj"
	if exist "build\$(CONFIG)\obj\pcre_compile.obj" del /Q "build\$(CONFIG)\obj\pcre_compile.obj"
	if exist "build\$(CONFIG)\obj\pcre_exec.obj" del /Q "build\$(CONFIG)\obj\pcre_exec.obj"
	if exist "build\$(CONFIG)\obj\pcre_globals.obj" del /Q "build\$(CONFIG)\obj\pcre_globals.obj"
	if exist "build\$(CONFIG)\obj\pcre_newline.obj" del /Q "build\$(CONFIG)\obj\pcre_newline.obj"
	if exist "build\$(CONFIG)\obj\pcre_ord2utf8.obj" del /Q "build\$(CONFIG)\obj\pcre_ord2utf8.obj"
	if exist "build\$(CONFIG)\obj\pcre_tables.obj" del /Q "build\$(CONFIG)\obj\pcre_tables.obj"
	if exist "build\$(CONFIG)\obj\pcre_try_flipped.obj" del /Q "build\$(CONFIG)\obj\pcre_try_flipped.obj"
	if exist "build\$(CONFIG)\obj\pcre_ucp_searchfuncs.obj" del /Q "build\$(CONFIG)\obj\pcre_ucp_searchfuncs.obj"
	if exist "build\$(CONFIG)\obj\pcre_valid_utf8.obj" del /Q "build\$(CONFIG)\obj\pcre_valid_utf8.obj"
	if exist "build\$(CONFIG)\obj\pcre_xclass.obj" del /Q "build\$(CONFIG)\obj\pcre_xclass.obj"
	if exist "build\$(CONFIG)\bin\libpcre.lib" del /Q "build\$(CONFIG)\bin\libpcre.lib"



#
#   config.h
#
build\$(CONFIG)\inc\config.h: $(DEPS_1)
	@echo '      [Copy] build/$(CONFIG)/inc/config.h'
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y src\config.h build\$(CONFIG)\inc\config.h

#
#   pcre.h
#
build\$(CONFIG)\inc\pcre.h: $(DEPS_2)
	@echo '      [Copy] build/$(CONFIG)/inc/pcre.h'
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y src\pcre.h build\$(CONFIG)\inc\pcre.h

#
#   pcre_internal.h
#
build\$(CONFIG)\inc\pcre_internal.h: $(DEPS_3)
	@echo '      [Copy] build/$(CONFIG)/inc/pcre_internal.h'
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y src\pcre_internal.h build\$(CONFIG)\inc\pcre_internal.h

#
#   me.h
#
build\$(CONFIG)\inc\me.h: $(DEPS_4)
	@echo '      [Copy] build/$(CONFIG)/inc/me.h'

#
#   ucp.h
#
DEPS_5 = $(DEPS_5) build\$(CONFIG)\inc\me.h

build\$(CONFIG)\inc\ucp.h: $(DEPS_5)
	@echo '      [Copy] build/$(CONFIG)/inc/ucp.h'
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y src\ucp.h build\$(CONFIG)\inc\ucp.h

#
#   ucpinternal.h
#
build\$(CONFIG)\inc\ucpinternal.h: $(DEPS_6)
	@echo '      [Copy] build/$(CONFIG)/inc/ucpinternal.h'
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y src\ucpinternal.h build\$(CONFIG)\inc\ucpinternal.h

#
#   ucptable.h
#
build\$(CONFIG)\inc\ucptable.h: $(DEPS_7)
	@echo '      [Copy] build/$(CONFIG)/inc/ucptable.h'
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y src\ucptable.h build\$(CONFIG)\inc\ucptable.h

#
#   pcre_chartables.obj
#
DEPS_8 = $(DEPS_8) build\$(CONFIG)\inc\me.h
DEPS_8 = $(DEPS_8) build\$(CONFIG)\inc\config.h
DEPS_8 = $(DEPS_8) build\$(CONFIG)\inc\pcre_internal.h
DEPS_8 = $(DEPS_8) build\$(CONFIG)\inc\pcre.h
DEPS_8 = $(DEPS_8) build\$(CONFIG)\inc\ucp.h

build\$(CONFIG)\obj\pcre_chartables.obj: \
    src\pcre_chartables.c $(DEPS_8)
	@echo '   [Compile] build/$(CONFIG)/obj/pcre_chartables.obj'
	"$(CC)" -c -Fobuild\$(CONFIG)\obj\pcre_chartables.obj -Fdbuild\$(CONFIG)\obj\pcre_chartables.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\pcre_chartables.c

#
#   pcre_compile.obj
#
DEPS_9 = $(DEPS_9) build\$(CONFIG)\inc\me.h
DEPS_9 = $(DEPS_9) build\$(CONFIG)\inc\config.h
DEPS_9 = $(DEPS_9) build\$(CONFIG)\inc\pcre_internal.h

build\$(CONFIG)\obj\pcre_compile.obj: \
    src\pcre_compile.c $(DEPS_9)
	@echo '   [Compile] build/$(CONFIG)/obj/pcre_compile.obj'
	"$(CC)" -c -Fobuild\$(CONFIG)\obj\pcre_compile.obj -Fdbuild\$(CONFIG)\obj\pcre_compile.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\pcre_compile.c

#
#   pcre_exec.obj
#
DEPS_10 = $(DEPS_10) build\$(CONFIG)\inc\me.h
DEPS_10 = $(DEPS_10) build\$(CONFIG)\inc\config.h
DEPS_10 = $(DEPS_10) build\$(CONFIG)\inc\pcre_internal.h

build\$(CONFIG)\obj\pcre_exec.obj: \
    src\pcre_exec.c $(DEPS_10)
	@echo '   [Compile] build/$(CONFIG)/obj/pcre_exec.obj'
	"$(CC)" -c -Fobuild\$(CONFIG)\obj\pcre_exec.obj -Fdbuild\$(CONFIG)\obj\pcre_exec.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\pcre_exec.c

#
#   pcre_globals.obj
#
DEPS_11 = $(DEPS_11) build\$(CONFIG)\inc\me.h
DEPS_11 = $(DEPS_11) build\$(CONFIG)\inc\config.h
DEPS_11 = $(DEPS_11) build\$(CONFIG)\inc\pcre_internal.h

build\$(CONFIG)\obj\pcre_globals.obj: \
    src\pcre_globals.c $(DEPS_11)
	@echo '   [Compile] build/$(CONFIG)/obj/pcre_globals.obj'
	"$(CC)" -c -Fobuild\$(CONFIG)\obj\pcre_globals.obj -Fdbuild\$(CONFIG)\obj\pcre_globals.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\pcre_globals.c

#
#   pcre_newline.obj
#
DEPS_12 = $(DEPS_12) build\$(CONFIG)\inc\me.h
DEPS_12 = $(DEPS_12) build\$(CONFIG)\inc\config.h
DEPS_12 = $(DEPS_12) build\$(CONFIG)\inc\pcre_internal.h

build\$(CONFIG)\obj\pcre_newline.obj: \
    src\pcre_newline.c $(DEPS_12)
	@echo '   [Compile] build/$(CONFIG)/obj/pcre_newline.obj'
	"$(CC)" -c -Fobuild\$(CONFIG)\obj\pcre_newline.obj -Fdbuild\$(CONFIG)\obj\pcre_newline.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\pcre_newline.c

#
#   pcre_ord2utf8.obj
#
DEPS_13 = $(DEPS_13) build\$(CONFIG)\inc\me.h
DEPS_13 = $(DEPS_13) build\$(CONFIG)\inc\config.h
DEPS_13 = $(DEPS_13) build\$(CONFIG)\inc\pcre_internal.h

build\$(CONFIG)\obj\pcre_ord2utf8.obj: \
    src\pcre_ord2utf8.c $(DEPS_13)
	@echo '   [Compile] build/$(CONFIG)/obj/pcre_ord2utf8.obj'
	"$(CC)" -c -Fobuild\$(CONFIG)\obj\pcre_ord2utf8.obj -Fdbuild\$(CONFIG)\obj\pcre_ord2utf8.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\pcre_ord2utf8.c

#
#   pcre_tables.obj
#
DEPS_14 = $(DEPS_14) build\$(CONFIG)\inc\me.h
DEPS_14 = $(DEPS_14) build\$(CONFIG)\inc\config.h
DEPS_14 = $(DEPS_14) build\$(CONFIG)\inc\pcre_internal.h

build\$(CONFIG)\obj\pcre_tables.obj: \
    src\pcre_tables.c $(DEPS_14)
	@echo '   [Compile] build/$(CONFIG)/obj/pcre_tables.obj'
	"$(CC)" -c -Fobuild\$(CONFIG)\obj\pcre_tables.obj -Fdbuild\$(CONFIG)\obj\pcre_tables.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\pcre_tables.c

#
#   pcre_try_flipped.obj
#
DEPS_15 = $(DEPS_15) build\$(CONFIG)\inc\me.h
DEPS_15 = $(DEPS_15) build\$(CONFIG)\inc\config.h
DEPS_15 = $(DEPS_15) build\$(CONFIG)\inc\pcre_internal.h

build\$(CONFIG)\obj\pcre_try_flipped.obj: \
    src\pcre_try_flipped.c $(DEPS_15)
	@echo '   [Compile] build/$(CONFIG)/obj/pcre_try_flipped.obj'
	"$(CC)" -c -Fobuild\$(CONFIG)\obj\pcre_try_flipped.obj -Fdbuild\$(CONFIG)\obj\pcre_try_flipped.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\pcre_try_flipped.c

#
#   pcre_ucp_searchfuncs.obj
#
DEPS_16 = $(DEPS_16) build\$(CONFIG)\inc\me.h
DEPS_16 = $(DEPS_16) build\$(CONFIG)\inc\config.h
DEPS_16 = $(DEPS_16) build\$(CONFIG)\inc\pcre_internal.h

build\$(CONFIG)\obj\pcre_ucp_searchfuncs.obj: \
    src\pcre_ucp_searchfuncs.c $(DEPS_16)
	@echo '   [Compile] build/$(CONFIG)/obj/pcre_ucp_searchfuncs.obj'
	"$(CC)" -c -Fobuild\$(CONFIG)\obj\pcre_ucp_searchfuncs.obj -Fdbuild\$(CONFIG)\obj\pcre_ucp_searchfuncs.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\pcre_ucp_searchfuncs.c

#
#   pcre_valid_utf8.obj
#
DEPS_17 = $(DEPS_17) build\$(CONFIG)\inc\me.h
DEPS_17 = $(DEPS_17) build\$(CONFIG)\inc\config.h
DEPS_17 = $(DEPS_17) build\$(CONFIG)\inc\pcre_internal.h

build\$(CONFIG)\obj\pcre_valid_utf8.obj: \
    src\pcre_valid_utf8.c $(DEPS_17)
	@echo '   [Compile] build/$(CONFIG)/obj/pcre_valid_utf8.obj'
	"$(CC)" -c -Fobuild\$(CONFIG)\obj\pcre_valid_utf8.obj -Fdbuild\$(CONFIG)\obj\pcre_valid_utf8.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\pcre_valid_utf8.c

#
#   pcre_xclass.obj
#
DEPS_18 = $(DEPS_18) build\$(CONFIG)\inc\me.h
DEPS_18 = $(DEPS_18) build\$(CONFIG)\inc\config.h
DEPS_18 = $(DEPS_18) build\$(CONFIG)\inc\pcre_internal.h

build\$(CONFIG)\obj\pcre_xclass.obj: \
    src\pcre_xclass.c $(DEPS_18)
	@echo '   [Compile] build/$(CONFIG)/obj/pcre_xclass.obj'
	"$(CC)" -c -Fobuild\$(CONFIG)\obj\pcre_xclass.obj -Fdbuild\$(CONFIG)\obj\pcre_xclass.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\pcre_xclass.c

#
#   libpcre
#
DEPS_19 = $(DEPS_19) build\$(CONFIG)\inc\config.h
DEPS_19 = $(DEPS_19) build\$(CONFIG)\inc\pcre.h
DEPS_19 = $(DEPS_19) build\$(CONFIG)\inc\pcre_internal.h
DEPS_19 = $(DEPS_19) build\$(CONFIG)\inc\me.h
DEPS_19 = $(DEPS_19) build\$(CONFIG)\inc\ucp.h
DEPS_19 = $(DEPS_19) build\$(CONFIG)\inc\ucpinternal.h
DEPS_19 = $(DEPS_19) build\$(CONFIG)\inc\ucptable.h
DEPS_19 = $(DEPS_19) build\$(CONFIG)\obj\pcre_chartables.obj
DEPS_19 = $(DEPS_19) build\$(CONFIG)\obj\pcre_compile.obj
DEPS_19 = $(DEPS_19) build\$(CONFIG)\obj\pcre_exec.obj
DEPS_19 = $(DEPS_19) build\$(CONFIG)\obj\pcre_globals.obj
DEPS_19 = $(DEPS_19) build\$(CONFIG)\obj\pcre_newline.obj
DEPS_19 = $(DEPS_19) build\$(CONFIG)\obj\pcre_ord2utf8.obj
DEPS_19 = $(DEPS_19) build\$(CONFIG)\obj\pcre_tables.obj
DEPS_19 = $(DEPS_19) build\$(CONFIG)\obj\pcre_try_flipped.obj
DEPS_19 = $(DEPS_19) build\$(CONFIG)\obj\pcre_ucp_searchfuncs.obj
DEPS_19 = $(DEPS_19) build\$(CONFIG)\obj\pcre_valid_utf8.obj
DEPS_19 = $(DEPS_19) build\$(CONFIG)\obj\pcre_xclass.obj

build\$(CONFIG)\bin\libpcre.lib: $(DEPS_19)
	@echo '      [Link] build/$(CONFIG)/bin/libpcre.lib'
	"lib.exe" -nologo -out:build\$(CONFIG)\bin\libpcre.lib "build\$(CONFIG)\obj\pcre_chartables.obj" "build\$(CONFIG)\obj\pcre_compile.obj" "build\$(CONFIG)\obj\pcre_exec.obj" "build\$(CONFIG)\obj\pcre_globals.obj" "build\$(CONFIG)\obj\pcre_newline.obj" "build\$(CONFIG)\obj\pcre_ord2utf8.obj" "build\$(CONFIG)\obj\pcre_tables.obj" "build\$(CONFIG)\obj\pcre_try_flipped.obj" "build\$(CONFIG)\obj\pcre_ucp_searchfuncs.obj" "build\$(CONFIG)\obj\pcre_valid_utf8.obj" "build\$(CONFIG)\obj\pcre_xclass.obj"

#
#   stop
#
stop: $(DEPS_20)
#  Omit build script stop

#
#   installBinary
#
installBinary: $(DEPS_21)
#  Omit build script installBinary

#
#   start
#
start: $(DEPS_22)
#  Omit build script start

#
#   install
#
DEPS_23 = $(DEPS_23) stop
DEPS_23 = $(DEPS_23) installBinary
DEPS_23 = $(DEPS_23) start

install: $(DEPS_23)
#  Omit build script install

#
#   uninstall
#
DEPS_24 = $(DEPS_24) stop

uninstall: $(DEPS_24)
#  Omit build script uninstall

#
#   version
#
version: $(DEPS_25)
	echo 1.0.3

